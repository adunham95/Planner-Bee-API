// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  body        String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    Int?
}

model User {
  id            Int          @id @default(autoincrement())
  firstName     String       @default("Buzz")
  lastName      String       @default("Honeywell")
  email         String       @unique
  password      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accountStatus String       @default("active")
  articles      Article[]
  loginTokens   LoginToken[]
  resetToken    ResetToken?
  contacts      Contact[]
  orders        Order[]
}

model LoginToken {
  id             Int      @id @default(autoincrement())
  token          String   @unique
  userID         Int
  user           User     @relation(fields: [userID], references: [id])
  expirationDate DateTime @default(now())

  @@index([token])
}

model ResetToken {
  id             Int      @id @default(autoincrement())
  token          String   @unique
  userID         Int      @unique
  user           User     @relation(fields: [userID], references: [id])
  expirationDate DateTime @default(now())

  @@index([token])
}

model ECardTemplate {
  id              String           @id @default(uuid())
  sku             String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  includedOptions String[]         @default([])
  components      ECardComponent[]
  eCards          ECard[]
  products        Product[]
}

model ECardComponent {
  id                 String            @id @default(uuid())
  key                String            @unique
  ecardComponentID   String
  ecardID            String?
  ecard              ECardTemplate?    @relation(references: [id], fields: [ecardID], onDelete: Cascade)
  label              String?           @default("")
  editable           Boolean?          @default(false)
  default            String?           @default("")
  customStyles       String?           @default("")
  options            String[]          @default([])
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt
  order              Int               @default(1)
  OptionItem         ECardOptionItem[]

  @@index([key])
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  imageURL String
  products Product[] @relation("ProductCategories")
}

model ECard {
  id               String            @id @default(uuid())
  deliveryDate     DateTime?
  eCardNumber      String?           @default("")
  eCardTemplateSKU String
  eCardTemplate    ECardTemplate     @relation(references: [sku], fields: [eCardTemplateSKU])
  recipients       Recipient[]
  options          ECardOptionItem[]
  status           String?           @default("draft")
  isCustom         Boolean           @default(true)
  order            OrderProduct?

  @@index([eCardNumber])
}

model ECardOptionItem {
  id             String         @id @default(uuid())
  eCardId        String?
  eCard          ECard?         @relation(references: [id], fields: [eCardId], onDelete: Cascade)
  name           String?
  value          String
  key            String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  eCardComponent ECardComponent @relation(fields: [key], references: [key])

  @@index([eCardId])
}

model Recipient {
  id        String   @id @default(uuid())
  firstName String?
  lastName  String?
  email     String?
  phone     String?
  eCardID   String?
  eCard     ECard?   @relation(references: [id], fields: [eCardID])
  contactID String?
  contact   Contact? @relation(fields: [contactID], references: [id])
}

model Contact {
  id        String      @id @default(uuid())
  firstName String?
  lastName  String?
  email     String?
  phone     String?
  userID    Int
  user      User        @relation(fields: [userID], references: [id])
  recipient Recipient[]
}

model Product {
  id                  String            @id @default(uuid())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now()) @updatedAt
  name                String
  sku                 String            @unique
  description         String
  price               Int
  imageURL            String?
  visible             Boolean           @default(true)
  featured            Boolean?          @default(false)
  productType         String
  eCardTemplateSKU    String?
  eCardTemplate       ECardTemplate?    @relation(fields: [eCardTemplateSKU], references: [sku])
  categories          Category[]        @relation("ProductCategories")
  orderProducts       OrderProduct[]

  @@index([sku])
}

model Order {
  id          String         @id @default(uuid())
  orderNumber String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  status      String?        @default("cart")
  customerID  Int?
  customer    User?          @relation(references: [id], fields: [customerID])
  products    OrderProduct[]

  @@index([orderNumber, customerID])
}

model OrderProduct {
  id          String  @id @default(uuid())
  orderNumber String
  order       Order   @relation(fields: [orderNumber], references: [id])
  productSKU  String
  product     Product @relation(fields: [productSKU], references: [sku])
  productType String
  quantity    Int     @default(1)
  eCardID     String? @unique
  eCard       ECard?  @relation(fields: [eCardID], references: [id])
}
