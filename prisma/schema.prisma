// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  body        String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    Int?
}

model User {
  id            Int          @id @default(autoincrement())
  name          String
  email         String       @unique
  password      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accountStatus String      @default("active")
  articles      Article[]
  myCard        ECard[]
  loginTokens   LoginToken[]
  resetToken    ResetToken?
}

model LoginToken {
  id             Int      @id @default(autoincrement())
  token          String @unique
  userID         Int
  user           User     @relation(fields: [userID], references: [id])
  expirationDate DateTime @default(now())

  @@index([token])
}

model ResetToken {
  id             Int      @id @default(autoincrement())
  token          String @unique
  userID         Int      @unique
  user           User     @relation(fields: [userID], references: [id])
  expirationDate DateTime @default(now())

  @@index([token])
}

model ECardTemplate {
  id              String           @id @default(uuid())
  sku             String           @unique
  name            String
  description     String
  cost            Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  includedOptions String[]         @default([])
  components      ECardComponent[]
  imageURL        String?
  visible         Boolean          @default(true)
  premium         Boolean?          @default(false)
  stripeProductID String?
  stripePriceID String?
  featuredItem    FeaturedItem?
  categories      Category[]       @relation("ECardTemplateCategories")
  eCards          ECard[]

  @@index([sku])
}

model ECardComponent {
  id               String        @id @default(uuid())
  key              String        @unique
  ecardComponentID String
  ecardID          String
  ecard            ECardTemplate @relation(references: [id], fields: [ecardID], onDelete: Cascade)
  label            String?       @default("")
  editable         Boolean?      @default(false)
  default         String?       @default("")
  customStyles     String?       @default("")
  options          String[]      @default([])
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt
  order            Int           @default(1)
  OptionItem       OptionItem[]

  @@index([key])
}

model FeaturedItem {
  id            String         @id @default(uuid())
  ecardID       String         @unique
  ecardTemplate ECardTemplate? @relation(references: [id], fields: [ecardID])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
}

model Category {
  id             String          @id @default(uuid())
  name           String          @unique
  imageURL       String
  eCardTemplates ECardTemplate[] @relation("ECardTemplateCategories")
}

model ECard {
  id               String        @id @default(uuid())
  senderEmail      String?       @default("")
  senderID         Int?
  sender           User?         @relation(references: [id], fields: [senderID])
  deliveryDate     DateTime?
  eCardNumber      String?       @default("")
  eCardTemplateSku String
  eCardTemplate    ECardTemplate @relation(references: [sku], fields: [eCardTemplateSku])
  recipients       Recipient[]
  options          OptionItem[]
  status           String?       @default("draft")
  isCustom Boolean @default(true)

  @@index([senderID, eCardNumber])
}

model OptionItem {
  id             String         @id @default(uuid())
  eCardId        String?
  eCard          ECard?         @relation(references: [id], fields: [eCardId])
  name           String?
  value          String
  key            String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  eCardComponent ECardComponent @relation(fields: [key], references: [key])

  @@index([eCardId])
}

model Recipient {
  id        String  @id @default(uuid())
  firstName String?
  lastName  String?
  email     String?
  phone     String?
  eCardID   String?
  eCard     ECard?  @relation(references: [id], fields: [eCardID])
}
